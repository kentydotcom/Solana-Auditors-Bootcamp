import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level5 } from "../target/types/level_5";
import * as path from 'path';
import * as fs from 'fs';


import * as web3 from "@solana/web3.js";
import * as splToken from "@solana/spl-token";


const MINT = new web3.PublicKey("AQgQFkAfMnqQQTPPb1AQGosYJBKQGBRWpEXYxNcyaxfk")
const ESCROW = new web3.PublicKey("HbGCPDmCNGE5w2cVvCFjkGFNSdGx7uw9N3mBYTRcvK4Y")
const ESCROW_TOKEN_ACCOUNT = new web3.PublicKey("HyyhVK1119SiWcHFjjjnE2L43NfFXjCBauBHiFEHu7to")
const GUARDIAN_SET = new web3.PublicKey("59ihtd3wfXES7zz4MvPUKfjT5n7c4rTzfpCBu3vy2NYi")
const RECIPIENT_TOKEN_ACCOUNT = new web3.PublicKey("6y3aq4nFpXU35JkQFbGnjoDtd5YivKtAT2p8j2ZBd6vy")
const SENDER_TOKEN_ACCOUNT = new web3.PublicKey("CEeQcvL8VRuufvRd3wrHN5x6RosztZD9pAosPDZW6H5t")
const VERIFICATION_PROGRAM = new web3.PublicKey("BqK4ZHrKeJudWinT6SyQe76uLoighkr7uvmE4bHCrv1L")



// x x x x x x x x x x x x x x x x x x x x x
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE BELOW
// | | | | | | | | | | | | | | | | | | | | |
// v v v v v v v v v v v v v v v v v v v v v


const SECRET = ""


// ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE ABOVE
// | | | | | | | | | | | | | | | | | | | | |
// x x x x x x x x x x x x x x x x x x x x x


describe("level-5", () => {
  // Configure the client to use the local cluster.
  let provider = anchor.AnchorProvider.local("http://127.0.0.1:8899");

  anchor.setProvider(provider);

  const program = anchor.workspace.Level5 as Program<Level5>;
  const hacker = load_keypair('../accounts/hacker.json');

  let escrowPdaAuthority: any, hackerTokenAccount: any;

  before("Setup", async () => {
    await airdrop(provider.connection, hacker.publicKey, 10 * anchor.web3.LAMPORTS_PER_SOL);

    [escrowPdaAuthority] = anchor.web3.PublicKey.findProgramAddressSync([anchor.utils.bytes.utf8.encode("ESCROW_PDA_AUTHORITY")], program.programId);


    hackerTokenAccount = await splToken.createAccount(provider.connection, hacker, MINT, hacker.publicKey, undefined, undefined, splToken.TOKEN_PROGRAM_ID);

  });

  // x x x x x x x x x x x x x x x x x x x x x
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE BELOW
  // | | | | | | | | | | | | | | | | | | | | |
  // v v v v v v v v v v v v v v v v v v v v v


  // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE ABOVE
  // | | | | | | | | | | | | | | | | | | | | |
  // x x x x x x x x x x x x x x x x x x x x x


  it("Secret", async () => {
    await program.methods.obtainSecret(SECRET).accounts({
      hacker: hacker.publicKey,
      hackerAta: hackerTokenAccount,
      mint: MINT,
    }).signers([hacker]).rpc({ commitment: "confirmed" })
  });

});


async function airdrop(connection: any, address: any, amount = 1000000000) {
  await connection.confirmTransaction(await connection.requestAirdrop(address, amount), "confirmed");
}

function load_keypair(name: string)
  : anchor.web3.Keypair {
  const jsonFilePath = path.join(__dirname, name);
  let rawdata = fs.readFileSync(jsonFilePath);
  let keyData = JSON.parse(rawdata.toString());
  return anchor.web3.Keypair.fromSecretKey(new Uint8Array(keyData))

}
