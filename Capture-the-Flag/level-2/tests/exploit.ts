import * as anchor from "@coral-xyz/anchor";
import { web3 } from "@coral-xyz/anchor";
import { assert } from "chai";

import { Program } from "@coral-xyz/anchor";
import { Level2 } from "../target/types/level_2";


// x x x x x x x x x x x x x x x x x x x x x
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE BELOW
// | | | | | | | | | | | | | | | | | | | | |
// v v v v v v v v v v v v v v v v v v v v v

const SECRET1 = ""
const SECRET2 = ""


// ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE ABOVE
// | | | | | | | | | | | | | | | | | | | | |
// x x x x x x x x x x x x x x x x x x x x x

describe("level-2", () => {
  // Configure the client to use the local cluster.
  let provider = anchor.AnchorProvider.env();

  anchor.setProvider(provider);

  const program = anchor.workspace.Level2 as Program<Level2>;


  anchor.setProvider(provider);

  const user1 = web3.Keypair.generate();
  const user2 = web3.Keypair.generate();
  const [player1_account] = web3.PublicKey.findProgramAddressSync([Buffer.from("EXPLORER"), user1.publicKey.toBuffer()], program.programId);
  const [player2_account] = web3.PublicKey.findProgramAddressSync([Buffer.from("EXPLORER"), user2.publicKey.toBuffer()], program.programId);

  before("Fund the users!", async () => {
    await airdrop(provider.connection, user1.publicKey);
    await airdrop(provider.connection, user2.publicKey);
  });

  it("Setup players!", async () => {
    await program.methods.initExplorer(SECRET1, SECRET2).accounts({ user: user1.publicKey, explorerAccount: player1_account, systemProgram: web3.SystemProgram.programId }).signers([user1]).rpc({ commitment: "confirmed" });
    await program.methods.initExplorer(SECRET1, SECRET2).accounts({ user: user2.publicKey, explorerAccount: player2_account, systemProgram: web3.SystemProgram.programId }).signers([user2]).rpc({ commitment: "confirmed" });
  });

  // x x x x x x x x x x x x x x x x x x x x x
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE BELOW
  // | | | | | | | | | | | | | | | | | | | | |
  // v v v v v v v v v v v v v v v v v v v v v



  // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE ABOVE
  // | | | | | | | | | | | | | | | | | | | | |
  // x x x x x x x x x x x x x x x x x x x x x

  it("Exploit evaluation", async () => {

    await program.methods.revealSecret().accounts({
      user1: user1.publicKey,
      user2: user2.publicKey,
      explorer1Account: player1_account,
      explorer2Account: player2_account,
    }).signers([user1, user2]).rpc({ commitment: "confirmed" })

  });

});


async function airdrop(connection: any, address: any, amount = 1000000000) {
  await connection.confirmTransaction(await connection.requestAirdrop(address, amount), "confirmed");
}
async function player_stats(program: any, player_account: any) {
  const playerData = await program.account.explorer.fetch(
    player_account,
    "confirmed"
  );
  return `
  \t- Mana: \x1b[94m\x1b[1m${playerData.mana}\x1b[0m,
  \t- Health: \x1b[32m\x1b[1m${playerData.health}\x1b[0m,
  \t- Experience: \x1b[93m\x1b[1m${playerData.experience}\x1b[0m,
  \t- Monsters Killed: \x1b[91m\x1b[1m${playerData.monstersDefeated}\x1b[0m`;
}
