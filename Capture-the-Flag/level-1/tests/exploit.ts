import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level1 } from "../target/types/level_1";

describe("level-1", () => {
  anchor.setProvider(anchor.AnchorProvider.env());


  const program = anchor.workspace.Level1 as Program<Level1>;

  const explorer = anchor.web3.Keypair.generate();

  before("Prepare", async () => {
    await airdrop(program.provider.connection, explorer.publicKey);

  });

  it("Exploit here!", async () => {
    const [ancientVault,] = anchor.web3.PublicKey.findProgramAddressSync(
      [
        Buffer.from('ancient_vault'),
      ],
      program.programId
    );

    // x x x x x x x x x x x x x x x x x x x x x
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE BELOW
    // | | | | | | | | | | | | | | | | | | | | |
    // v v v v v v v v v v v v v v v v v v v v v


    // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE ABOVE
    // | | | | | | | | | | | | | | | | | | | | |
    // x x x x x x x x x x x x x x x x x x x x x


  });
});

async function airdrop(
  connection: any,
  address: any,
  amount = 500_000_000_000
) {
  await connection.confirmTransaction(
    await connection.requestAirdrop(address, amount),
    'confirmed'
  );
}
